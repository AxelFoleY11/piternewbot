import os
import logging
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import utils, config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    utils.track_user_activity(user.id, "start")
    
    if await utils.check_subscription(user.id, context):
        remaining = utils.get_remaining_downloads(user.id, config.MAX_DAILY_DOWNLOADS)
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.\n\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {remaining}/{config.MAX_DAILY_DOWNLOADS}"
        )
    else:
        await update.message.reply_text(
            "üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:",
            reply_markup=utils.subscription_keyboard()
        )


# --- /analytics ---
async def analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.")
        return
    
    stats = utils.get_analytics_summary()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    message = f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
    message += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    message += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö: {stats['subscribed_users']}\n"
    message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏: {stats['subscription_rate']}%\n"
    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_users_today']}\n\n"
    
    message += f"üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏—è:**\n"
    message += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['today_downloads']}\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_downloads']}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    daily_stats = stats['daily_stats']
    if daily_stats:
        message += f"üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:**\n"
        sorted_days = sorted(daily_stats.items(), reverse=True)[:7]
        for date, count in sorted_days:
            message += f"‚Ä¢ {date}: {count} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n"
    
    await update.message.reply_text(message, parse_mode='Markdown')


# --- /system ---
async def system(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        return
    
    load_info = utils.get_system_load()
    
    message = f"üñ•Ô∏è **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    message += f"üìä **–ù–∞–≥—Ä—É–∑–∫–∞:**\n"
    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {load_info['active_downloads']}/{load_info['max_concurrent']}\n"
    message += f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {load_info['load_percentage']:.1f}%\n\n"
    
    message += f"‚öôÔ∏è **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n"
    message += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {config.MAX_CONCURRENT_DOWNLOADS}\n"
    message += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {config.MAX_FILE_SIZE // (1024*1024)}MB\n"
    message += f"‚Ä¢ –õ–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å: {config.MAX_DAILY_DOWNLOADS}\n"
    
    await update.message.reply_text(message, parse_mode='Markdown')


# --- /userstats ---
async def userstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /userstats <user_id>")
        return
    
    try:
        target_user_id = int(context.args[0])
        user_stats = utils.get_user_stats(target_user_id)
        
        if not user_stats:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            return
        
        message = f"üë§ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:**\n\n"
        message += f"üìÖ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {user_stats['first_seen']}\n"
        message += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user_stats['last_seen']}\n"
        message += f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {user_stats['total_downloads']}\n"
        message += f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {'–î–∞' if user_stats['is_subscribed'] else '–ù–µ—Ç'}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")


# --- /limits ---
async def limits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=utils.subscription_keyboard()
        )
        return
    
    used = utils.get_user_download_count(user.id)
    remaining = utils.get_remaining_downloads(user.id, config.MAX_DAILY_DOWNLOADS)
    
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π:\n\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{config.MAX_DAILY_DOWNLOADS}\n"
        f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n"
        f"‚è∞ –°–±—Ä–æ—Å: –∑–∞–≤—Ç—Ä–∞ –≤ 00:00"
    )


# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    utils.track_user_activity(user.id, "message")
    
    if not await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=utils.subscription_keyboard()
        )
        return

    url = (update.message.text or "").strip()
    norm = utils.normalize_video_url(url)

    if not norm:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ YouTube: https://youtube.com/watch?v=...\n"
            "‚Ä¢ Shorts / youtu.be / embed\n"
            "‚Ä¢ TikTok: https://tiktok.com/@user/video/...\n"
            "‚Ä¢ Instagram: /reel/, /p/, /tv/\n"
            "‚Ä¢ VK, Vimeo, Dailymotion"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    if not utils.can_user_download(user.id, config.MAX_DAILY_DOWNLOADS):
        await update.message.reply_text(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π!\n\n"
            f"üìä –õ–∏–º–∏—Ç: {config.MAX_DAILY_DOWNLOADS} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            f"üîÑ –°–±—Ä–æ—Å: –∑–∞–≤—Ç—Ä–∞ –≤ 00:00"
        )
        return
    
    kb, remaining = utils.quality_keyboard(norm, user.id)
    await update.message.reply_text(
        f"üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:\n\n"
        f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {remaining}/{config.MAX_DAILY_DOWNLOADS}",
        reply_markup=kb
    )


# --- inline –∫–Ω–æ–ø–∫–∏ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "check_subscription":
        if await utils.check_subscription(query.from_user.id, context):
            await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        else:
            await query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
        return

    if not data.startswith("quality_"):
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: quality_720_abc12345
    parts = data.split("_")
    if len(parts) != 3:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    quality = parts[1]
    video_id = parts[2]
    url = utils.pop_cached_url(video_id)

    if not url:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞")
        return

    if not await utils.check_subscription(query.from_user.id, context):
        await query.edit_message_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –µ—â–µ —Ä–∞–∑
    if not utils.can_user_download(query.from_user.id, config.MAX_DAILY_DOWNLOADS):
        await query.edit_message_text(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π!\n\n"
            f"üìä –õ–∏–º–∏—Ç: {config.MAX_DAILY_DOWNLOADS} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            f"üîÑ –°–±—Ä–æ—Å: –∑–∞–≤—Ç—Ä–∞ –≤ 00:00"
        )
        return

    try:
        await query.edit_message_text(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤ {quality}p...")
        file_path = utils.download_video(url, quality, query.from_user.id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        utils.increment_download_count(query.from_user.id)

        if not os.path.exists(file_path):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            return

        file_size = os.path.getsize(file_path)
        if file_size > config.TELEGRAM_LIMIT:
            await query.edit_message_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (>2 –ì–ë)")
            try:
                os.remove(file_path)
            except Exception:
                pass
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        with open(file_path, "rb") as f:
            await query.message.reply_video(
                video=f,
                caption=f"üìπ –í–∏–¥–µ–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ {quality}p"
            )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        remaining = utils.get_remaining_downloads(query.from_user.id, config.MAX_DAILY_DOWNLOADS)
        await query.edit_message_text(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {remaining}/{config.MAX_DAILY_DOWNLOADS}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")


def main():
    app = Application.builder().token(config.BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("limits", limits))
    app.add_handler(CommandHandler("analytics", analytics))
    app.add_handler(CommandHandler("system", system))
    app.add_handler(CommandHandler("userstats", userstats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
