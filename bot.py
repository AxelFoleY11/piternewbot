
# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext
)
import config
import utils
import os
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
    patterns = [
        # YouTube
        r'(https?://)?(www\.)?(youtube\.com|youtu\.be)/(watch\?v=|embed/|v/|.+?v=)([a-zA-Z0-9_-]{11})',
        # TikTok –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∏–¥–µ–æ
        r'(https?://)?(www\.|m\.|vm\.)?tiktok\.com/.+?/video/\d+',
        r'(https?://)?(www\.|m\.|vm\.)?tiktok\.com/.+?/v/\d+',
        r'(https?://)?(vm\.|m\.)?tiktok\.com/\w+/',
        # Instagram
        r'(https?://)?(www\.)?instagram\.com/(p|reel)/([a-zA-Z0-9_-]+)/',
        # –î—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        r'(https?://)?(www\.)?vk\.com/video(-?\d+_\d+)',
        r'(https?://)?(www\.)?dailymotion\.com/video/([a-zA-Z0-9]+)',
        r'(https?://)?(www\.)?vimeo\.com/([0-9]+)'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if any(url.startswith(base) for base in [
        'https://www.tiktok.com/',
        'https://tiktok.com/',
        'https://www.instagram.com/',
        'https://instagram.com/',
        'https://www.youtube.com/',
        'https://youtube.com/'
    ]) and '/video/' not in url and '/watch?' not in url and '/p/' not in url:
        return False
    
    return any(re.match(pattern, url) for pattern in patterns)

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.id}")
    
    if await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–¥–µ–æ-–±–æ—Ç!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å –æ–¥–Ω–æ–π –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:\n"
            "YouTube, TikTok, Instagram, VK, Dailymotion, Vimeo\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—á–∏—Ö —Å—Å—ã–ª–æ–∫:</b>\n"
            "‚Ä¢ YouTube: https://youtube.com/watch?v=...\n"
            "‚Ä¢ TikTok: https://tiktok.com/@user/video/123...\n"
            "‚Ä¢ Instagram: https://instagram.com/p/...",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>",
            reply_markup=utils.subscription_keyboard(),
            parse_mode="HTML"
        )

async def check_subscription_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if await utils.check_subscription(query.from_user.id, context):
        await query.edit_message_text(
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:",
            parse_mode="HTML"
        )
    else:
        await query.answer("‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text.strip()
    
    if not await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:",
            reply_markup=utils.subscription_keyboard(),
            parse_mode="HTML"
        )
        return
    
    if is_valid_url(text):
        await update.message.reply_text(
            "üé¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:</b>",
            reply_markup=utils.quality_keyboard(text),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>\n\n"
            "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
            "‚Ä¢ YouTube: https://youtube.com/watch?v=...\n"
            "‚Ä¢ TikTok: https://tiktok.com/@user/video/123...\n"
            "‚Ä¢ Instagram: https://instagram.com/p/...\n\n"
            "<b>–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:</b> –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–æ—Ñ–∏–ª–∏, –ø–æ–∏—Å–∫",
            parse_mode="HTML"
        )

async def handle_quality_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    data = query.data.split("_")
    quality = data[1]
    url = "_".join(data[2:])
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await utils.check_subscription(query.from_user.id, context):
        await query.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤!", show_alert=True)
        return
    
    await query.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
    await query.edit_message_text(f"üîÑ <b>–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ {quality}p...</b>", parse_mode="HTML")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É downloads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("downloads", exist_ok=True)
        
        file_path = utils.download_video(url, quality)
        
        if os.path.getsize(file_path) > config.MAX_FILE_SIZE:
            os.remove(file_path)
            raise ValueError("–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB")
        
        await context.bot.send_video(
            chat_id=query.message.chat_id,
            video=open(file_path, "rb"),
            caption=f"‚úÖ –í–∏–¥–µ–æ {quality}p —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!",
            supports_streaming=True,
            read_timeout=60,
            write_timeout=60,
            connect_timeout=60
        )
        os.remove(file_path)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await query.edit_message_text(error_msg)
        logger.error(f"Error downloading video: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É
        try:
            await context.bot.send_message(
                config.ADMIN_ID,
                f"–û—à–∏–±–∫–∞ —É @{query.from_user.username}:\n{error_msg}\n\nURL: {url}"
            )
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if not config.TOKEN or config.TOKEN == "your_bot_token_here":
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            return
        
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {config.TOKEN[:10]}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        app = Application.builder()\
            .token(config.TOKEN)\
            .read_timeout(30)\
            .connect_timeout(30)\
            .pool_timeout(30)\
            .build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="^check_subscription$"))
        app.add_handler(CallbackQueryHandler(handle_quality_choice, pattern="^quality_"))
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram.")
        
        app.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
