from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext
)
import config
import utils
import os
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
def is_valid_url(url: str) -> bool:
    patterns = [
        r'(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+',
        r'(https?://)?(www\.)?tiktok\.com/.+',
        r'(https?://)?(www\.)?instagram\.com/.+',
        r'(https?://)?(www\.)?vk\.com/.+',
        r'(https?://)?(www\.)?dailymotion\.com/.+',
        r'(https?://)?(www\.)?vimeo\.com/.+'
    ]
    return any(re.match(pattern, url) for pattern in patterns)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    if await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–¥–µ–æ-–±–æ—Ç!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å –æ–¥–Ω–æ–π –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:\n"
            "YouTube, TikTok, Instagram, VK, Dailymotion, Vimeo",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>",
            reply_markup=utils.subscription_keyboard(),
            parse_mode="HTML"
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if await utils.check_subscription(query.from_user.id, context):
        await query.edit_message_text(
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:",
            parse_mode="HTML"
        )
    else:
        await query.answer("‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    text = update.message.text
    
    if not await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:",
            reply_markup=utils.subscription_keyboard(),
            parse_mode="HTML"
        )
        return
    
    if is_valid_url(text):
        await update.message.reply_text(
            "üé¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:</b>",
            reply_markup=utils.quality_keyboard(text),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
            "YouTube, TikTok, Instagram, VK, Dailymotion, Vimeo",
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
async def handle_quality_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data.split("_")
    quality = data[1]
    url = "_".join(data[2:])
    
    if not await utils.check_subscription(query.from_user.id, context):
        await query.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤!", show_alert=True)
        return
    
    await query.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
    await query.edit_message_text(f"üîÑ <b>–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –≤ {quality}p...</b>", parse_mode="HTML")
    
    try:
        os.makedirs("downloads", exist_ok=True)
        
        file_path = utils.download_video(url, quality)
        
        if os.path.getsize(file_path) > config.MAX_FILE_SIZE:
            os.remove(file_path)
            raise ValueError("–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB")
        
        await context.bot.send_video(
            chat_id=query.message.chat_id,
            video=open(file_path, "rb"),
            caption=f"‚úÖ –í–∏–¥–µ–æ {quality}p —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!",
            supports_streaming=True
        )
        os.remove(file_path)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await query.edit_message_text(error_msg)
        logger.error(f"Error downloading video: {e}")
        
        try:
            await context.bot.send_message(
                config.ADMIN_ID,
                f"–û—à–∏–±–∫–∞ —É @{query.from_user.username}:\n{error_msg}\n\nURL: {url}"
            )
        except:
            pass

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(config.TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="^check_subscription$"))
    app.add_handler(CallbackQueryHandler(handle_quality_choice, pattern="^quality_"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()
