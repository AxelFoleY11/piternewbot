import os
import logging
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import utils, config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if await utils.check_subscription(user.id, context):
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
    else:
        await update.message.reply_text(
            "üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:",
            reply_markup=utils.subscription_keyboard()
        )


# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=utils.subscription_keyboard()
        )
        return

    url = (update.message.text or "").strip()
    norm = utils.normalize_video_url(url)

    if not norm:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ YouTube: https://youtube.com/watch?v=...\n"
            "‚Ä¢ Shorts / youtu.be / embed\n"
            "‚Ä¢ TikTok: https://tiktok.com/@user/video/...\n"
            "‚Ä¢ Instagram: /reel/, /p/, /tv/\n"
            "‚Ä¢ VK, Vimeo, Dailymotion"
        )
        return

    kb = utils.quality_keyboard(norm)
    await update.message.reply_text("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=kb)


# --- inline –∫–Ω–æ–ø–∫–∏ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "check_subscription":
        if await utils.check_subscription(query.from_user.id, context):
            await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        else:
            await query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
        return

    if not data.startswith("quality_"):
        return

    _, q, vid = data.split("_")
    url = utils.pop_cached_url(vid)

    if not url:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞")
        return

    if not await utils.check_subscription(query.from_user.id, context):
        await query.edit_message_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.")
        return

    try:
        await query.edit_message_text(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤ {q}p...")
        file_path = utils.download_video(url, q)

        if os.path.getsize(file_path) > config.TELEGRAM_LIMIT:
            await query.edit_message_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (>2 –ì–ë)")
            return

        await query.message.reply_video(video=open(file_path, "rb"))
        await query.edit_message_text("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        try:
            os.remove(file_path)
        except Exception:
            pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    app = Application.builder().token(config.BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
