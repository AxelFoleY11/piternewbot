# bot.py
# -*- coding: utf-8 -*-
import os
import asyncio
import logging
import traceback

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

import config
import utils

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "üé¨ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Shorts, TikTok, Instagram, VK, Vimeo, Dailymotion)."
        )
    else:
        await update.message.reply_text(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=utils.subscription_keyboard(),
        )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ ‚Äî –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–∞—á–∞–µ—Ç mp4.\n\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:\n"
        "‚Ä¢ YouTube (–≤–∫–ª—é—á–∞—è Shorts, youtu.be)\n"
        "‚Ä¢ TikTok (–≤–∫–ª—é—á–∞—è vm.tiktok.com)\n"
        "‚Ä¢ Instagram (p, reel, tv)\n"
        "‚Ä¢ VK, Vimeo, Dailymotion\n\n"
        "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: –ø—Ä–æ—Ñ–∏–ª–∏, –ø–ª–µ–π–ª–∏—Å—Ç—ã, –ø–æ–∏—Å–∫."
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (update.message.text or "").strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await utils.check_subscription(user.id, context):
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω ‚Äî –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=utils.subscription_keyboard(),
        )
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç shorts, youtu.be –∏ —Ç.–¥.)
    norm_url = utils.normalize_video_url(text)
    if not norm_url:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ YouTube: https://youtube.com/watch?v=...\n"
            "‚Ä¢ Shorts / youtu.be\n"
            "‚Ä¢ TikTok: https://tiktok.com/@user/video/123...\n"
            "‚Ä¢ Instagram: https://instagram.com/p/... –∏–ª–∏ /reel/...\n\n"
            "‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è: –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–æ—Ñ–∏–ª–∏, –ø–æ–∏—Å–∫."
        )
        return

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ø—É–ª–µ, —Ç.–∫. yt-dlp –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º.
        loop = asyncio.get_running_loop()
        kb = await loop.run_in_executor(None, utils.quality_keyboard, norm_url)
        await update.message.reply_text("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.")
        await notify_admin(
            context,
            f"–û—à–∏–±–∫–∞ quality_keyboard —É {user.id} @{getattr(user, 'username', None)}:\n{e}\n{traceback.format_exc()}",
        )


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if await utils.check_subscription(query.from_user.id, context):
        await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
    else:
        await query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.", show_alert=True)


# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ ---
async def handle_quality_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_", 2)
    if len(parts) < 3:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    _, quality, video_id = parts
    url = utils.URL_CACHE.get(video_id)
    if not url:
        await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await utils.check_subscription(query.from_user.id, context):
        await query.edit_message_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return

    await query.edit_message_text(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤ {quality}p...")

    try:
        loop = asyncio.get_running_loop()
        file_path = await loop.run_in_executor(None, utils.download_video, url, quality)

        if not os.path.exists(file_path):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await notify_admin(context, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {url}")
            return

        with open(file_path, "rb") as f:
            await query.message.reply_video(video=f, caption=f"‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ {quality}p")

        try:
            os.remove(file_path)
        except Exception:
            pass

        await query.edit_message_text("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
        await notify_admin(
            context,
            f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —É {query.from_user.id} @{getattr(query.from_user, 'username', None)}:\n"
            f"URL: {url}\nError: {e}\n{traceback.format_exc()}",
        )


# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        admin = getattr(config, "ADMIN_ID", 0)
        if admin and int(admin) != 0:
            await context.bot.send_message(chat_id=int(admin), text=f"‚ö†Ô∏è BOT ERROR\n{text}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")


# --- –ó–∞–ø—É—Å–∫ ---
def main():
    token = getattr(config, "TOKEN", None)
    if not token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")
        return

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="^check_subscription$"))
    app.add_handler(CallbackQueryHandler(handle_quality_choice, pattern="^quality_"))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    main()
