# utils.py
import yt_dlp
import os
import time
import uuid
import logging
from urllib.parse import urlparse, parse_qs
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import config

logger = logging.getLogger(__name__)

# –ö—ç—à URL –∏ –ø–æ–¥–ø–∏—Å–æ–∫
URL_CACHE = {}
subscription_cache = {}


# --- –ü–æ–¥–ø–∏—Å–∫–∞ ---
def check_cache(user_id: int):
    if user_id in subscription_cache:
        is_subscribed, ts = subscription_cache[user_id]
        if time.time() - ts < config.CACHE_TIMEOUT:
            return is_subscribed
    return None


def set_cache(user_id: int, is_subscribed: bool):
    subscription_cache[user_id] = (is_subscribed, time.time())


async def check_subscription(user_id: int, context) -> bool:
    cached = check_cache(user_id)
    if cached is not None:
        return cached
    try:
        for channel in config.CHANNELS:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —è–≤–Ω–æ—Å—Ç–∏
                member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
                if member.status not in ["member", "administrator", "creator"]:
                    set_cache(user_id, False)
                    return False
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {channel}: {e}")
                # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ—É–¥–∞—á–Ω–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
                set_cache(user_id, False)
                return False
        set_cache(user_id, True)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        set_cache(user_id, False)
        return False


# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ ---
def normalize_video_url(url: str) -> str | None:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Å—ã–ª–∫—É:
      - youtube.com/shorts/ID -> https://www.youtube.com/watch?v=ID
      - youtu.be/ID -> https://www.youtube.com/watch?v=ID
      - vm.tiktok.com (–∏ –¥—Ä—É–≥–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–µ TikTok) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, yt-dlp —Ä–∞–∑—Ä—É–ª–∏—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç
      - instagram /p/ /reel/ /tv/ -> –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (vk, vimeo, dailymotion –∏ —Ç.–¥.)
    """
    if not url:
        return None
    url = url.strip()

    lower = url.lower()

    # YouTube Shorts ‚Üí watch?v=
    if "youtube.com/shorts/" in lower:
        # –ë–µ—Ä—ë–º —Ä–µ–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ shorts/
        video_id = url.split("shorts/")[-1].split("?")[0].split("/")[0]
        if video_id:
            return f"https://www.youtube.com/watch?v={video_id}"

    # youtu.be ‚Üí watch?v=
    if "youtu.be/" in lower:
        video_id = url.split("youtu.be/")[-1].split("?")[0].split("/")[0]
        if video_id:
            return f"https://www.youtube.com/watch?v={video_id}"

    # –û–±—ã—á–Ω—ã–π YouTube watch?v=
    if "youtube.com/watch" in lower or "youtube.com/watch?" in lower:
        return url.split("&")[0]  # –æ—Ç—Ä–µ–∑–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    # TikTok short links (vm, vt) –∏ –æ–±—ã—á–Ω—ã–µ tiktok —Å—Å—ã–ª–∫–∏ ‚Äî yt-dlp —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
    if "vm.tiktok.com" in lower or "vt.tiktok.com" in lower or "tiktok.com" in lower:
        return url.split("?")[0]

    # Instagram
    if "instagram.com" in lower and ("/reel/" in lower or "/p/" in lower or "/tv/" in lower):
        return url.split("?")[0]

    # VK, Vimeo, Dailymotion - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if "vk.com" in lower or "vimeo.com" in lower or "dailymotion.com" in lower:
        return url.split("?")[0]

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return None


# --- –ö–∞—á–µ—Å—Ç–≤–∞ ---
def get_available_qualities(url: str) -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ (–≤—ã—Å–æ—Ç–∞ –≤ px)."""
    ydl_opts = {"quiet": True, "skip_download": True}
    qualities = []
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            for f in info.get("formats", []):
                if f.get("height"):
                    qualities.append(int(f["height"]))
        qualities = sorted(set(qualities))
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        allowed = [360, 480, 720, 1080, 1440, 2160]
        return [q for q in qualities if q in allowed]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è {url}: {e}")
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 720p
        return [720]


# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ---
def download_video(url: str, quality: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é yt-dlp –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "720" –∏–ª–∏ "1080").
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    """
    try:
        height = int(quality)
    except Exception:
        height = 720

    os.makedirs("downloads", exist_ok=True)

    ydl_opts = {
        "format": f"bestvideo[height<={height}]+bestaudio/best[height<={height}]",
        "outtmpl": "downloads/%(id)s.%(ext)s",
        "merge_output_format": "mp4",
        "ffmpeg_location": config.FFMPEG_PATH,
        "noplaylist": True,
        "quiet": True,
        "max_filesize": config.MAX_FILE_SIZE,
        # –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
        "postprocessor_args": ["-threads", "4"],
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            # –ï—Å–ª–∏ merge_output_format —Å–æ–∑–¥–∞–ª .mp4 —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º .mp4
            mp4_name = os.path.splitext(filename)[0] + ".mp4"
            if os.path.exists(mp4_name):
                return mp4_name
            return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
        raise Exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def subscription_keyboard():
    buttons = [
        [InlineKeyboardButton(f"üîî {ch}", url=f"https://t.me/{ch.replace('@','')}")]
        for ch in config.CHANNELS
    ]
    buttons.append([InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")])
    return InlineKeyboardMarkup(buttons)


def quality_keyboard(url: str):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç InlineKeyboard —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –≤ URL_CACHE –ø–æ–¥ —Å–ª—É—á–∞–π–Ω—ã–º id.
    """
    video_id = str(uuid.uuid4())[:8]
    URL_CACHE[video_id] = url

    qualities = get_available_qualities(url)

    # –ï—Å–ª–∏ yt-dlp –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ, –¥–æ–±–∞–≤–∏–º 720
    if not qualities:
        qualities = [720]

    buttons = []
    row = []
    for q in qualities:
        row.append(InlineKeyboardButton(f"{q}p", callback_data=f"quality_{q}_{video_id}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(buttons)
